Control + l : clear 역할을 한다

Control + a : 명령줄 처음으로
Control + e : 명령줄 마지막으로

Control + f : 앞으로
Control + b : 뒤로

alt(option) + f : 한 단어 앞
alt(option) + b : 한 단어 뒤

control + t : 앞글자와 위치 바꾸기
alt + t : 앞단어와 위치 바꾸기

control + k : 커서부터 끝까지 삭제
control + u : 커서부터 앞을 삭제

alt + d : 단어 삭제
control + d : 현재 커서 위치 삭제

control + w : 커서부터 앞으로 단어 삭제

control + y : yanking - 삭제한 문구를 다시 불러온다

history 에서 Control + r 을 누르면 ???

date : 현재시간이 나온다.
ncal : 이번달 달력이 나온다.
clear : 터미널 창을 지워준다.
ncal -> new calander
cal 기존 calander
ㄴ 인자로 년도와 월을 전달할 수 있다 ncal 7 1969
ㄴ ncal -3 : 전후 3달 달력을 보여준다

echo '' : 작성한 명령어를 적어준다
-u
--universal
ㄴ대시 하나에 긴 문자열을 입력하면 여러 옵션으로 인식한다
man 명령어 : 를 통해 해당 명령어의 문서를 볼 수 있다.
b 로 뒤로가기 f로 앞으로 가기(space bar 동일)
h 눌러 help로

man에서 시놉시스, 대괄호 내의 문자는 선택적 요소를 의미함
... 은 여러 인자를 전달할 수 있음을 의미
man 섹션번호 명령어
ㄴ예를들어 printf 의 경우에 섹션1은 명령어에 대한 설명이고 섹션3는 c언어 메서드에 대한 설명이다.

type : 명령어가 어떤 종류인지 알려줌
which : 명령어의 위치를 알려줌

shell builtin 명령어의 경우 help 로 찾을 수 있는 경우가 있다 (cd)
ㄴ pwd는 man이 된다.

whoami : 현재 로그인한 계정
who : whoami보다 더 다양한 정보를 볼 수 있다. -b 할 경우 가장 최근 부팅시간을 볼 수 있다

xdg-open : root directoryfmf gui로 연다. 
ㄴ맥에서는 open / 로 연다.
리눅스에서는 모든 사용자는 /home 디렉토리 내에 존재한다.   :   맥에서는 Users

pwd : print working directory
ls : list , ls / 등으로 경로지정이 가능
ㄴ ls -a 는 .(숨김) 으로 시작하는 파일,디렉토리도 보여준다(all)
ㄴ ls -t(맥) 시간순 정렬
cd : change directory

기타 디렉토리
bin - 바이너리 파일들(man 등등..)
etc - 설정파일들(cron 등)
media - usb 등등
var - 변수들(로그,캐시 등)

touch : 파일 생성시 사용 띄어쓰기를 통해 여러 파일 동시 생성 가능, / 사용하여 특정 경로 내에 생성 가능
ㄴ touch는 원래 파일 시간을 변경하기 위한 명령어지만 주로 생성으로 사용한다.

file 파일명 : 파일의 확장자 등 속성을 알 수 있다.

파일명 규칙에 공백을 피하라!(대시나 언더바 권장 또는 연결된 단어 대문자 권장)
그리고 < 등 예약된 문자열도 피해야 한다.

mkdir : 디렉토리 생성
ㄴ -p옵션의 경우 부모 디렉토리가 없으면 같이 생성한다.

ls -R 할 경우 하위까지 트리구조처럼 보여준다.

rm : 여러 인자로 삭제도 가능
rm -d : 빈 디렉토리 삭제
rm -i : 삭제 전 질의
rmdir 도 가능

mv 원본 목적지 : 파일(폴더) 이동
mv 파일1 파일2 파일3 목적지 : 여러 파일 이동
ㄴ 목적지를 존재하지 않는 경로로 입력하면 이름을 바꾼다

cp 파일 목적지 : 복사
cp 파일1 파일2 목적지 : 여러 파일 복사
cp -r 옵션으로 하위디렉토리까지 포함하여 복사 가능

cat(concatenate:결합하다) : 파일을 열지 않고 출력
cat file1 file2 로 여러 파일을 동시에 볼 수 있다.

less 파일명 : 대화식으로 보여주고 페이지를 넘길 수 있고, 검색도 가능(man 페이지와 같은 인터페이스)

* Ctrl + a 로 명령줄 시작으로 Ctrl + e 로 명령줄 끝으로

tac(cat의 역순 출력) - 여러 파일도 가능 == tail -r

rev 는 줄 내에서 순서를 뒤집어준다 red -> der

--- 모두 파일 자체를 변경하지는 않는다 ---

head : 파일의 시작부터 몇 줄을 출력 한다
tail : 파일의 마지막 10줄을 보여준다.
-n 숫자 옵션은 직접 출력할 갯수를 정할 수 있다. // 그냥 숫자만 적어도 된다.
-c 숫자 옵션은 바이트 출력
tail -f 리스닝.. 추가되는 값에 대해 출력한다.

wc(word count) : 특정 파일의 줄 수, 단어 수, 바이트 수를 알려준다
1번은 줄 수 / 2번은 단어 수 / 3번은 바이트 수
줄 수만 얻고자 한다면 wc -l // 단어는 wc -w // 바이트는 wc -c // wc -m 파일의 문자 수

sort 파일명 알파벳순으로 정렬(소문자 먼저 정렬 - a A b B)
sort -n 숫자 크기로 정렬 가능
sort -u(unique) 중복 단어 제거

sort -k 로 열 번호 기준으로 정렬이 가능하다

pipe(|) : 앞의 명령을 뒤 명령으로 전달한다.

command1 | command2

ls -1 하면 일렬로 보여준다 + total 라인 제외된다

tr 명령어 : 문자의 번역(변환)
cat somefile | tr s $
tr a-z A-Z 방식으로 모두 대문자로 변환 가능
-d s 모든 s 삭제
tr -d [:alpha:]    :   모든 문자 삭제  /  맥은 "[:alpha:]"
[:blank:]    :   공백

sed awk 명령어도 있음...

du 명령어는 disk usage 크기정렬이 가능

tee 명령어는 표춘 입력을 파일로 저장하고 다음 출력으로 보낸다


locate 명령어 - 사전에 생성된 데이터베이스를 사용한다.
-i  :  대소문자 구분없음
-l숫자  :  갯수 
-e  :  locate는 database를 사용하기 때문에, 삭제 직후에 조회하면 여전히 있다. 이때 e 옵션을 통해 존재 유무를 확인할 수 있다.
ㄴ updatedb 를 통해 갱신 가능

find  :  locate보다 강하지만 시간이 더 걸림(데이터베이스가 아니라 실제 검색)
ls 는 현재 디렉토리 리스트만 보여주지만 find는 하위까지 전부 보여준다
find . | wc -l 로 하위 모든 파일(+디렉토리)의 개수를 알 수 있다.

find . -type d   :  현재부터 모든 파일 타입을 찾는다(디렉토리 제외)

find . -name " "*.txt"   :   name은 대소문자를 구분한다. -iname 옵션으로 대소문자 구분없이 가능

find ~ -name "*[0-9]*"    :    방식으로 0에서 9까지가 포함된 파일을 찾을 수도 있다.

find 추가 옵션

find -size +1G(-1G) +는 이상 -는 이하
find -user 로 특정 사용자 파일
find -empty 로 빈 파일 찾기 가능

TimeStamps

mtime   :   파일이 마지막으로 변경된 시간(mv 등으로 변경되지 않음)     -   modify
ctime    :   mv등 메타 정보가 변경된 시간 (ls -lc)   -   change
atime    :   파일을 읽은(접근) 시간(ls -lu)     -    access
ㄴ find에 각 타임스탬프별 명령어가 있다.

touch 파일명 -d "3 week ago"   :  -d 명령어로 이전 시간의 파일을 생성할 수 있다.(숫자 + days, week, month 등)
find -mnin +30   :   30분 이상 전에 수정된 파일


논리연산자 옵션

-not   :   ! 로도 쓸 수 있다.

find ~ -not -name "*.txt"    :   txt가 아닌 모든 파일...

-or   :   둘 중 하나만 만족해도 찾는다.

find -exec command '{}' ';'   :   find로 찾은 것들에 대해 어떠한 명령어를 수행한다.
find ~ -type f -empty -exec ls -l '{}' ';'   :   ls 명령어는 표준입력을 지원하지 않기 때문에 파이프라인으로 사용할 수 없다.

-exec 대신 -ok 옵션을 쓰면 실행할때마다 물어본다.

옵션이 2개일 경우
find ~ -type f -name "*.html" -exec cp '{}' '{}_COPY' ';'  처럼 두번 쓴다.


xargs 명령어
표준입력을 받아 인자 목록으로 변환하는 역할을 한다.

find . -empty | xargs ls -l    :   ls 명령어가 가능해진다. 어떤 명령어가 수행되는지는 xargs 에 -t 옵션을 주면 된다.



grep 커맨드
파일 내용을 검색한다.
-i    :   대소문자 구분없이 검색
-w   :   정확히 일치하는 단어
-r   :   재귀옵션  grep -ri "검색어" 를 통해 어느 파일에 있는지 알 수 있다.
-l   :   어떤 파일에 있는지 알려준다.

정규식 사용가능
grep -ri "parm[ae]san " MealDiary/    :   형식으로 찾을 수 있다.

-c 옵션으로 카운트 가능
-B숫자 옵션으로 이전 숫자행만큼 추가 표시
-A숫자 다음행
-C숫자 앞뒤
-n 옵션   :   행번호 확인
-m숫자   :   숫자개의 결과만 확인하는 옵션

regex
.   :   하나의 문자
^  :   시작을 의미   grep "^I"   는 I로 시작한다는 의미
$  :   끝을 의미      grep ")$"   는 ) 로 끝나는 문장
[a-z]  :  a부터 z까지 포함   [1-6]  :  1부터 6까지 포함
[^1-6]   :   1에서 6까지가 아닌것

grep -E     ==    egrep   확장된 regex를 사용할 수 있는 grep

grep [aeiou]{2} -E    :   aeiou중 2개가 모여있는 문구(중괄호는 확장 정규식에서만 사용 가능)
grep [aeiou]{2,4} -E  :   2개에서 4개 가 모여있는 문구


- redirection
- 표준 입력(0) 출력(1) 에러(2) : 괄호는 디스크럽터 번호

1. 출력 redirection
 command > filename
ㄴ 이미 있는 파일에 다시 하면 덮어씌운다.
추출한 파일을 sort -k5n 등을 통해 정렬(로그 활용 등)
 command >> filename 을 통해 덮어쓰지 않고 연결해서 
echo [메세지] > filename 으로 편집기를 열지 않고 바로 입력

2. 입력 redirection
 commant < filename
단순 사용으로는 의미없지만, 파이프라인과 함께 사용하면 유용하다

3. 입출력 동시 redirection
=
cat < original.txt > output.txt

4. 표준에러 redirection
command 2> filename
command 2>> filename 으로 이어서도 가능

5. 추가
표준 출력과 에러를 redirection 할때는 출력을 먼저 작성
출력과 에러를 같은 파일에 저장하는 방법 2>&1
ㄴ ls -l > output.txt 2>&1     ==      ls -l &> output.txt   으로 줄여쓸 수도 있음



환경변수

printenv   :   접속한 계정의 환경변수를볼 수 있다(K:V 구조)

매개변수 확장
환경변수 접근하는 방법   :   $USER  ,  $PWD  ,  $OLDPWD   등등....
ㄴ환경변수 key는 모두 대문자이다.

나만의 환경변수 만들기
animal=nudibranch    :    쉘변수 저장(환경변수 아님, 지역변수처럼 동작)

export animal=mandrill   :   환경변수 저장


배쉬 스크립트

#!/bin/bash     :     #! shebang 이라고 명칭함
이후 명령어를 입력하여 파일 생성

환경변수에서 PATH에 추가되어 있는 변수는 전역적으로 실행이 가능하다...
echo $PATH 하였을때 나오는 리스트에서 탐색한다.

나만의 변수를 추가하려면... 경로를 생성한 뒤
.profile 파일을 편집하여 경로를 추가해준다.
source .profile 하면 추가됨

생성한 변수에 권한이 없으면... 실행권한을 주어야 한다.
chmod a+x hi     ==     chmod +x hi


shebang의 중요성
#!/usr/bin/python3   처럼 (파이썬 경로를)지정하면.. 해당 파일을 어떤 환경변수로 실행해야 하는지 지정할 수 있다.

#!/bin/bash
curl "wttr.in/$1"    :    처럼 하면 뒤에 입력하는 변수를 받을 수 있다.


;;     :    표시는 case의 마지막을 나타낸다.



입력모드
i 는 앞부분 , a는 뒷부분, 줄의 맨 앞은 I 뒤는 A 입력

명령모드
H J(아래) K(위) L 
0 문장의 앞
$ 문장의 뒤

w 단어 이동 - 3w 3단어 점프
b 단어 뒤로 이동 - 3b

H : 화면 상단이동
L : 하단이동
M : 중간이동

gg : 파일 최상단 이동
G : 파일 최하단 이동

숫자G : 숫자 라인으로 이동

ctrl u : 위로 스크롤
ctrl d : 아래 스크롤
{ : 문단 시작
} : 문단 끝

x : 커서 아래 글자 삭제
dd : 문장 삭제
yy : 문장 복사
p : 붙여넣기
*p : 클립보드 내용을 붙여넣기
ㄴ "vim.useSystemClipboard": true  설정 후 사용 가능

d + 3w : 3단어를 삭제 , aw : 단어 삭제 , at : 태그 삭제 , ap 문단 , as 문장
   it : 태그 안 , i" 쌍따옴표 안 , ip 문단 안
c(change) +

. 을 누르면 이전 명령을 반복한다.
u 를 누르면 되감기
ctrl r : redo 한다.

d2j : 아래 두 줄 삭제 3k 위 세 줄 삭제
di{ : 중괄호 안 내용 삭제 (inside)

da( : 소괄호 합해서 삭제 (all? a?)
ci[ : [ 내 내용 변경(자동으로 입력모드)

d 한 후 p로 붙여넣을 수 있음

df( : 커서부터 소괄호까지 삭제
dt( : 커서부터 소괄호 전까지 삭제

d/use : use 키워드 앞까지 삭제

/ : 검색 , 이후 n 으로 다음 단어 검색
? ; 마지막 검색 이후, n으로 이전 단어 검색

v : select mode
vaw : 단어 하나를 선택
ctrl + v : 블럭 선택 가능

vimtutor 입력하면 공식 가이드를 볼 수 있다.
공식문서에서 pdf도 가능 -> 4개 챕터정도만 봐도 충분히 가능할 것




cron

crontab -e   :   커맨드를 활용(현재 사용자)

cron syntax

a   b  c  d   e   command
분 시 일 월 요일

*     :   매번
5,6   :  5또는 6
1-4  :  1에서 4
*/5   :  5마다

30 * * * * command    :   매 시 30분마다 (30분간격 아님)
0 0 * * *  command    :   매일 자정마다
30 6 * * * command   :   매일 6시 30분마다
30 6 * * 1 command   :   매주 월요일 6시 30분마다
30 6 * 4 1 command   :   4월의 매주 월요일 6시 30분마다
0 0 1 * * command     :  매월 1일 자정마다
0 0 * * 1-5 command  :  매 평일 자정마다
*/5 * * * * command   :   5분마다
crontab.guru 사이트 참고

크론탭에 오류가 있을 경우....?
2>&1 하여 에러도 표준출력을 해준다..

tar 명령어  :   아카이브 명령어
